


int Solution::longestSubsequenceLength(const vector<int> &A) {
    int i, j;
    int n=A.size();
      if (n==0)
        return 0;
    vector<int> lis(n,1);
    vector<int> lds(n,1);
     
       for (i = 1; i < n; i++)
          for (j = 0; j < i; j++)
             if (A[i] > A[j] && lis[i] < lis[j] + 1)
                lis[i] = lis[j] + 1;
     
        for (i = n-2; i >= 0; i--)
          for (j = n-1; j > i; j--)
             if (A[i] > A[j] && lds[i] < lds[j] + 1)
                lds[i] = lds[j] + 1;
     
     
       int max = lis[0] + lds[0] - 1;
       for (i = 1; i < n; i++)
         if (lis[i] + lds[i] - 1 > max)
             max = lis[i] + lds[i] - 1;
       return max;
        
    }
